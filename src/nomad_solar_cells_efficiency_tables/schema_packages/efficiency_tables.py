#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import (
    TYPE_CHECKING,
)

import numpy as np
from nomad.datamodel.data import (
    ArchiveSection,
)
from nomad.datamodel.metainfo.eln import (
    Chemical,
    ElnBaseSection,
    PublicationReference,
    SolarCellBaseSectionWithOptoelectronicProperties,
    SolarCellDefinition,
    SolarCellJVCurve,
    SolarCellLayer,
)
from nomad.metainfo import (
    Package,
    Quantity,
    Section,
    SubSection,
)

# from nomad.parsing.tabular import TableRow

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='Solar cell efficiency tables schema')


class PublicationReference(PublicationReference, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    DOI_number = Quantity(
        type=str,
        # a_tabular={'name': 'doi'},
        a_eln={'component': 'StringEditQuantity'},
    )


class SolarCellDefinition(SolarCellDefinition, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    stack_sequence = Quantity(
        type=str,
        # a_tabular={'name': 'Device structure'},
        a_eln={'component': 'StringEditQuantity'},
    )
    solar_cell_area = Quantity(
        type=np.float64,
        # a_tabular={'name': 'Area (cm2)'},
        a_eln={'component': 'NumberEditQuantity'},
        unit='cm**2',
    )


class SolarCellParameters(SolarCellJVCurve, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    open_circuit_voltage = Quantity(
        type=np.float64,
        # a_tabular={'name': 'VOC\u00a0(V)'},
        a_eln={'component': 'NumberEditQuantity'},
        unit='V',
    )
    short_circuit_current_density = Quantity(
        type=np.float64,
        # a_tabular={'name': 'JSC\u00a0(mA cm\u22122)'},
        a_eln={'component': 'NumberEditQuantity'},
        unit='mA/cm**2',
    )
    fill_factor = Quantity(
        type=np.float64,
        # a_tabular={'name': 'FF'},
        a_eln={'component': 'NumberEditQuantity'},
    )
    efficiency = Quantity(
        type=np.float64,
        # a_tabular={'name': 'Eff. (%)'},
        a_eln={'component': 'NumberEditQuantity'},
    )


class AbsorberLayer(
    Chemical,
    SolarCellBaseSectionWithOptoelectronicProperties,
    SolarCellLayer,
    ArchiveSection,
):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={'hide': ['name', 'lab_id', 'description']},
    )
    chemical_formula = Quantity(
        type=str,
        # a_tabular={'name': 'Formula'},
        a_eln={'component': 'StringEditQuantity'},
    )
    solar_cell_layer_type = Quantity(
        type=str,
        # a_eln={'component': 'StringEditQuantity'},
        default='Absorber',
    )
    layer_name = Quantity(
        type=str,
        # a_tabular={'name': 'Material'},
        a_eln={'component': 'StringEditQuantity'},
    )
    bandgap = Quantity(
        type=np.float64,
        # a_tabular={'name': 'Eg\u00a0(eV)'},
        a_eln={'component': 'NumberEditQuantity'},
        unit='eV',
    )


class SolarCell(ElnBaseSection, ArchiveSection):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={'hide': ['name', 'lab_id']},
    )
    description = Quantity(
        type=str,
        # a_tabular={'name': 'Institutions and Comments'},
        a_eln={'component': 'RichTextEditQuantity'},
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )
    solar_cell_definition = SubSection(
        section_def=SolarCellDefinition,
    )
    solar_cell_parameters = SubSection(
        section_def=SolarCellParameters,
    )
    absorber_layer = SubSection(
        section_def=AbsorberLayer,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `SolarCell` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


m_package.__init_metainfo__()
